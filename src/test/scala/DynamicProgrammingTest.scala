import org.scalatest.FunSuite
import DynamicProgramming._


class DynamicProgrammingTest extends FunSuite {
  test("Climb stairs") {
    val conditions = Array((1, 1), (2, 2), (3, 3), (4, 5), (5, 8), (45, 1836311903))

    for (cond <- conditions) {
      assert(climbStairs(cond._1) == cond._2)
      assert(climbStairsRecursive(cond._1) == cond._2)
      assert(climbStairsFP(cond._1) == cond._2)
    }
  }

  test("House Robber") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(1, 2, 3, 1), 4),
      (Array(2, 7, 9, 3, 1), 12),
      (Array(114, 117, 207, 117, 235, 82, 90, 67, 143, 146, 53, 108, 200, 91, 80, 223, 58, 170, 110, 236, 81, 90, 222, 160, 165, 195, 187, 199, 114, 235, 197, 187, 69, 129, 64, 214, 228, 78, 188, 67, 205, 94, 205, 169, 241, 202, 144, 240), 4173),
      (Array(0), 0),
      (Array(7), 7)
    )

    for (cond <- conditions) {
      assert(rob(cond._1) == cond._2)
      assert(robRecursive(cond._1) == cond._2)
      assert(robFP(cond._1) == cond._2)
    }
  }

  test("House Robber II") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(2, 3, 2), 3),
      (Array(1, 2, 3, 1), 4),
      (Array(2, 3, 3), 3),
      (Array(5, 4, 3), 5),
      (Array(3, 4, 3), 4),
      (Array(3, 4, 3, 1), 6),
      (Array(5, 4, 3, 1), 8),
      (Array(5, 26, 3, 19, 1), 45),
      (Array(5, 4, 3, 1, 8), 12),
      (Array(5, 4, 3, 8), 12),
      (Array(0), 0),
      (Array(7), 7),
      (Array(1, 2), 2),
      (Array(1, 2, 1, 1), 3)
    )

    for (cond <- conditions) {
      assert(rob2(cond._1) == cond._2)
      assert(rob2FP(cond._1) == cond._2)
    }
  }

  test("Min Cost Climbing Stairs") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(10, 15, 20), 15),
      (Array(1, 100, 1, 1, 1, 100, 1, 1, 100, 1), 6)
    )

    for (cond <- conditions) {
      assert(minCostClimbingStairs(cond._1) == cond._2)
      assert(minCostClimbingStairsRecursive(cond._1) == cond._2)
      assert(minCostClimbingStairsFP(cond._1) == cond._2)
    }
  }

  test("Fibonacci Number") {
    val conditions = Array((-1, 0), (0, 0), (2, 1), (3, 2), (4, 3), (20, 6765))

    for (cond <- conditions) {
      assert(fib(cond._1) == cond._2)
      assert(fibFP(cond._1) == cond._2)
    }
  }

  test("N-th Tribonacci Number") {
    val conditions = Array((0, 0), (1, 1), (2, 1), (3, 2), (4, 4), (25, 1389537))

    for (cond <- conditions) {
      assert(tribonacci(cond._1) == cond._2)
      assert(tribonacciRecursive(cond._1) == cond._2)
      assert(tribonacciFP(cond._1) == cond._2)
    }
  }

  test("Delete and Earn") {
    val conditions = Array(
      (Array(3, 4, 2), 6),
      (Array(2, 2, 3, 3, 3, 4), 9),
      (Array(14, 12, 13, 17, 22, 6, 14, 41, 50, 40, 26), 202),
      (Array(1, 8, 5, 9, 6, 9, 4, 1, 7, 3, 3, 6, 3, 3, 8, 2, 6, 3, 2, 2, 1, 2, 9, 8, 7, 1, 1, 10, 6, 7, 3, 9, 6, 10, 5, 4, 10, 1, 6, 7, 4, 7, 4, 1, 9, 5, 1, 5, 7, 5), 138)
    )

    for (cond <- conditions) {
      assert(deleteAndEarn(cond._1) == cond._2)
    }
  }

  test("Maximum Score from Performing Multiplication Operations") {
    val conditions = Array(
      (Array(1, 2, 3), Array(3, 2, 1), 14),
      (Array(-5, -3, -3, -2, 7, 1), Array(-10, -5, 3, 4, 6), 102),
      (Array(-947, 897, 328, -467, 14, -918, -858, -701, -518, -997, 22, 259, -4, 968, 947, 582, -449, 895, -121, -403, 633, 490, 64, 543, -396, -997, 841, -398, 247, 297, -147, -708, 804, -199, -765, -547, -599, 406, -223, -11, 663, 746, -365, -859, 256, -25, 919, -334, 490, -511, 865, -139, -968, 961, -793, 451, 317, 645, -294, 240, -312, -822, 961, -572, 309, 579, 161, 780, 525, -622, -511, 423, 946, -28, -199, 822, -123, -316, -913, 113, -458, -428, -414, 49, 922, 722, -854, 323, -219, 581, 302, 124, 164, 31, 727, 186, 308, -936, -937, -862, 939, 213, 966, -74, -76, -1, 521, 777, -966, 454, -199, 526, -895, 447, -749, -518, -639, 849, -771, 979, -760, -763, -601, -201, 40, -911, 207, 890, -942, -352, 700, 267, 830, -396, 536, 877, -896, -687, 262, -60, -373, -373, 526), Array(864, 849, 586, 769, 309, -413, 318, 652, 883, -690, 796, 251, -648, 433, 1000, -969, 422, 194, -785, -242, -118, 69, 187, -925, -418, -556, 88, -399, -619, -383, -188, 206, -793, -9, 738, -587, 878, 360, 640, 318, -399, -366, 365, -291, -75, -451, -674, -199, 177, 862, 1, 11, 390, -52, -101, 127, -354, -717, -717, 180, 655, 817, -898, 28, -641, -35, -563, -737, 283, -223, -322, -59, 955, 172, 230, 512, -205, -180, 899, 169, -663, -253, 270, 651, 168, 417, 613, -443, 980, -189, 417, 372, -891, -272, 993, -877, 906, 680, -630, -328, -873, -811, 78, -667, -2, 190, -773, 878, 529, 620, -951, -687, 314, -989, -48, -601, -950, 31, -789, -663, -480, 750, -872, -358, 529, -426, -111, 517, 750, -536, -673, 370), 32383191)
    )

    for (cond <- conditions) {
      assert(maximumScoreRecursive(cond._1, cond._2) == cond._3)
      assert(maximumScore(cond._1, cond._2) == cond._3)
    }
  }

  test("Longest Common Subsequence") {
    val conditions = Array(
      ("abcde", "ace", 3),
      ("abc", "abc", 3),
      ("abc", "def", 0),
      ("bsbininm", "jmjkbkjkv", 1),
      ("bl", "yby", 1)
    )

    for (cond <- conditions) {
      assert(longestCommonSubsequenceRecursive(cond._1, cond._2) == cond._3)
      assert(longestCommonSubsequence(cond._1, cond._2) == cond._3)
    }
  }

  test("Maximal Square") {
    val conditions: Array[(Array[Array[Char]], Int)] = Array(
      (Array(
        "10100",
        "10111",
        "11111",
        "10010").map(x => x.toCharArray), 4),

      (Array(
        "00000",
        "10111",
        "11111",
        "10010").map(x => x.toCharArray), 4),

      (Array(
        "00000",
        "10000",
        "00000",
        "00000").map(x => x.toCharArray), 1),

      (Array(
        "00000",
        "00000",
        "00100",
        "00000").map(x => x.toCharArray), 1),

      (Array(
        "0000010",
        "1011101",
        "1111111",
        "1010111").map(x => x.toCharArray), 4),

      (Array(
        "00000",
        "10111",
        "11111",
        "10111").map(x => x.toCharArray), 9),

      (Array(
        "0000010",
        "1011101",
        "1111111",
        "1011111").map(x => x.toCharArray), 9),

      (Array(
        "00000100",
        "10111010",
        "11111110",
        "10111110",
        "10111110",
        "10111110"
      ).map(x => x.toCharArray), 16),

      (Array(
        "01",
        "10").map(x => x.toCharArray), 1),

      (Array("10").map(x => x.toCharArray), 1),
      (Array("0", "1").map(x => x.toCharArray), 1)


    )

    for (cond <- conditions) {
      assert(maximalSquare(cond._1) == cond._2)
      assert(maximalSquareRecursive(cond._1) == cond._2)
    }
  }

  test("Jump Game") {
    val conditions: Array[(Array[Int], Boolean)] = Array(
      (Array(2, 3, 1, 1, 4), true),
      (Array(3, 2, 1, 0, 4), false),
      (Array(1), true),
      (Array(0), true),
      (Array(1, 0), true),
      (Array(0, 1), false),
      (Array(2, 0), true),
      (Array(2, 0, 0), true)
    )

    for (cond <- conditions) {
      assert(canJumpRecursive(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(canJumpQueue(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(canJump(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(canJumpFP(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Jump Game II") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(2, 3, 1, 1, 4), 2),
      (Array(2, 3, 0, 1, 4), 2),
      (Array(0), 0),
      (Array(1, 0), 1),
      (Array(2, 0), 1),
      (Array(2, 0, 0), 1)
    )

    for (cond <- conditions) {
      assert(canJump2Naive(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(canJump2(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(canJump2FP(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Maximum Subarray") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(-2, 1, -3, 4, -1, 2, 1, -5, 4), 6),
      (Array(1), 1),
      (Array(5, 4, -1, 7, 8), 23),
      (Array(-7, 0, -1, 7, 8), 15),
      (Array(-7, 0, -1, -2, -4), 0),
      (Array(-5, -7, -1, -2, -4), -1),
      (Array(5, -3, 5, 5, -3, 5), 14),
      (Array(-2, 4, -5, 4, -5, 9, 4), 13),
      (Array(5, 5, -3), 10)
    )

    for (cond <- conditions) {
      assert(maxSubArray(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(maxSubArrayKadane(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Minimum Subarray") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(-2, 1, -3, 4, -1, 2, 1, -5, 4), -5),
      (Array(1), 1),
      (Array(5, 4, -1, 7, 8), -1),
      (Array(-7, 0, -1, 7, 8), -8),
      (Array(-7, 0, -1, -2, -4), -14),
      (Array(-5, -7, -1, -2, -4), -19),
      (Array(5, -3, 5, 5, -3, 5), -3),
      (Array(-2, 4, -5, 4, -5, 9, 4), -6),
      (Array(5, 5, -3), -3)
    )

    for (cond <- conditions) {
      assert(minSubArrayKadane(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Maximum Sum Circular Subarray") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(1, -2, 3, -2), 3),
      (Array(1), 1),
      (Array(5, -3, 5), 10),
      (Array(-3, -2, -3), -2),
      (Array(5, 4, -1, 7, 8), 24),
      (Array(5, 4, -1, -1000, 7, 8), 24),
      (Array(-2, 4, -5, 4, -5, 9, 4), 15),
      (Array(-5, -7, -1, -2, -4), -1)
    )

    val source = scala.io.Source.fromResource("maximumSubCircularSubarray.txt")
    val testcase: Array[Int] = source.getLines().map(_.split(",").map(_.trim.toInt)).next()

    for (cond <- conditions) {
      assert(maxSubarraySumCircularBruteForce(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(maxSubarraySumCircularBruteForce(testcase) == 2126311, f"wrong for array from maximumSubCircularSubarray.txt")
      assert(maxSubarraySumCircular(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(maxSubarraySumCircular(testcase) == 2126311, f"wrong for array from maximumSubCircularSubarray.txt")
    }
  }

  test("Maximum Product Subarray") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(2, 3, -2, 4), 6),
      (Array(2, 3, -2, 4, -3), 144),
      (Array(2, 3, -2, 4, -3, 1, 2, -6, 10), 1440),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, 10), 10),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, 0, -6, 10), 10),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, -6, -6, 0, -6, 10), 36),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, 0, -6, 10), 10),
      (Array(-10), -10),
      (Array(-2, 0, -1), 0)
    )

    for (cond <- conditions) {
      assert(maxProductNaive(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(maxProduct(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Maximum Length of Subarray With Positive Product") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(1, -2, -3, 4), 4),
      (Array(0, 1, -2, -3, -4), 3),
      (Array(-1, -2, -3, 0, 1), 2),
      (Array(2), 1),
      (Array(0), 0),
      (Array(-1), 0),
      (Array(2, 3, -2, 4), 2),
      (Array(2, 3, -2, 4, -3), 5),
      (Array(2, 3, -2, 4, -3, 1, 2, -6, 10), 7),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, 10), 2),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, 0, -6, 10), 2),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, -6, -6, -6, 0, -6, 10), 2),
      (Array(2, 3, -2, 4, 0, -3, 1, 2, 0, 0, -6, 10), 2),
      (Array(-10), 0),
      (Array(-2, 0, -1), 0),
      (Array(-1, 2), 1),
      (Array(-1, 2, 2, 2, 2), 4),
      (Array(2, 2, -1, 2, 2, 3), 3),
      (Array(-2, 2, -1, 2, 2, 3), 6),
      (Array(-1, 2, -1, 4), 4)
    )

    for (cond <- conditions) {
      assert(getMaxLen(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
      assert(getMaxLenKadane(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Group Anagrams") {
    val conditions: Array[(Array[String], List[List[String]])] = Array(
      (Array("eat", "tea", "tan", "ate", "nat", "bat"), List(List("bat"), List("tan", "nat"), List("eat", "tea", "ate"))),
      (Array("ab", "ba"), List(List("ab", "ba"))),
      (Array("a", "abc"), List(List("a"), List("abc")))
    )

    for (cond <- conditions) {
      assert(groupAnagrams(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Minimum Difficulty of a Job Schedule") {
    val conditions: Array[(Array[Int], Int, Int)] = Array(
      (Array(6, 5, 4, 3, 2, 1), 2, 7),
      (Array(6, 5, 10, 3, 2, 1), 2, 11),
      (Array(6, 5, 10, 3, 2, 1), 3, 13),
      (Array(6, 5, 10, 7, 2, 4, 2, 3, 2, 1), 4, 16),
      (Array(9, 9, 9), 4, -1),
      (Array(1, 1, 1), 3, 3)
    )

    for (cond <- conditions) {
      assert(minDifficultyRecursive(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._1.mkString(",")}")
      assert(minDifficulty(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Best Sightseeing Pair") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(8, 1, 5, 2, 6), 11),
      (Array(1, 2), 2),
      (Array(8, 1, 5, 2, 6, -2, 4, 2, 14), 16),
      (Array(3, 7, 2, 3), 9)
    )

    for (cond <- conditions) {
      assert(maxScoreSightseeingPair(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Best Time to Buy and Sell Stock") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(7, 1, 5, 3, 6, 4), 5),
      (Array(7, 1, 5, 3, 6, 0), 5),
      (Array(7, 6, 4, 3, 1), 0),
      (Array(7, 6, -2, 4, 1, 8, 3, 6, 4), 10),
      (Array(7), 0),
      (Array(0), 0),
    )

    for (cond <- conditions) {
      assert(maxProfitKadane(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Best Time to Buy and Sell Stock II") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(7, 1, 5, 3, 6, 4), 7),
      (Array(7, 6, 4, 3, 1), 0),
      (Array(1, 2, 3, 4, 5), 4),
      (Array(7, 6, -2, 4, 1, 8, 3, 6, 4), 16),
      (Array(7), 0),
      (Array(0), 0),
    )

    for (cond <- conditions) {
      assert(maxProfitII(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Best Time to Buy and Sell Stock with Cooldown") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(1, 2, 3, 0, 2), 3),
      (Array(3, 1, 2, 3, 0, 2), 3),
      (Array(3, 1, 2, 6, 7, 8, 1, 4, 7), 12),
      (Array(1), 0),
      (Array(1, 2), 1),
      (Array(1, 2, 3), 2),
      (Array(1, 4, 2), 3)
    )

    for (cond <- conditions) {
      assert(maxProfitCooldown(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Best Time to Buy and Sell Stock IV") {
    val conditions: Array[(Int, Array[Int], Int)] = Array(
      (2, Array(2, 4, 1), 2),
      (2, Array(3, 2, 6, 5, 0, 3), 7),
      (100, Array(70, 4, 83, 56, 94, 72, 78, 43, 2, 86, 65, 100, 94, 56, 41, 66, 3, 33, 10, 3, 45, 94, 15, 12, 78, 60, 58, 0, 58, 15, 21, 7, 11, 41, 12, 96, 83, 77, 47, 62, 27, 19, 40, 63, 30, 4, 77, 52, 17, 57, 21, 66, 63, 29, 51, 40, 37, 6, 44, 42, 92, 16, 64, 33, 31, 51, 36, 0, 29, 95, 92, 35, 66, 91, 19, 21, 100, 95, 40, 61, 15, 83, 31, 55, 59, 84, 21, 99, 45, 64, 90, 25, 40, 6, 41, 5, 25, 52, 59, 61, 51, 37, 92, 90, 20, 20, 96, 66, 79, 28, 83, 60, 91, 30, 52, 55, 1, 99, 8, 68, 14, 84, 59, 5, 34, 93, 25, 10, 93, 21, 35, 66, 88, 20, 97, 25, 63, 80, 20, 86, 33, 53, 43, 86, 53, 55, 61, 77, 9, 2, 56, 78, 43, 19, 68, 69, 49, 1, 6, 5, 82, 46, 24, 33, 85, 24, 56, 51, 45, 100, 94, 26, 15, 33, 35, 59, 25, 65, 32, 26, 93, 73, 0, 40, 92, 56, 76, 18, 2, 45, 64, 66, 64, 39, 77, 1, 55, 90, 10, 27, 85, 40, 95, 78, 39, 40, 62, 30, 12, 57, 84, 95, 86, 57, 41, 52, 77, 17, 9, 15, 33, 17, 68, 63, 59, 40, 5, 63, 30, 86, 57, 5, 55, 47, 0, 92, 95, 100, 25, 79, 84, 93, 83, 93, 18, 20, 32, 63, 65, 56, 68, 7, 31, 100, 88, 93, 11, 43, 20, 13, 54, 34, 29, 90, 50, 24, 13, 44, 89, 57, 65, 95, 58, 32, 67, 38, 2, 41, 4, 63, 56, 88, 39, 57, 10, 1, 97, 98, 25, 45, 96, 35, 22, 0, 37, 74, 98, 14, 37, 77, 54, 40, 17, 9, 28, 83, 13, 92, 3, 8, 60, 52, 64, 8, 87, 77, 96, 70, 61, 3, 96, 83, 56, 5, 99, 81, 94, 3, 38, 91, 55, 83, 15, 30, 39, 54, 79, 55, 86, 85, 32, 27, 20, 74, 91, 99, 100, 46, 69, 77, 34, 97, 0, 50, 51, 21, 12, 3, 84, 84, 48, 69, 94, 28, 64, 36, 70, 34, 70, 11, 89, 58, 6, 90, 86, 4, 97, 63, 10, 37, 48, 68, 30, 29, 53, 4, 91, 7, 56, 63, 22, 93, 69, 93, 1, 85, 11, 20, 41, 36, 66, 67, 57, 76, 85, 37, 80, 99, 63, 23, 71, 11, 73, 41, 48, 54, 61, 49, 91, 97, 60, 38, 99, 8, 17, 2, 5, 56, 3, 69, 90, 62, 75, 76, 55, 71, 83, 34, 2, 36, 56, 40, 15, 62, 39, 78, 7, 37, 58, 22, 64, 59, 80, 16, 2, 34, 83, 43, 40, 39, 38, 35, 89, 72, 56, 77, 78, 14, 45, 0, 57, 32, 82, 93, 96, 3, 51, 27, 36, 38, 1, 19, 66, 98, 93, 91, 18, 95, 93, 39, 12, 40, 73, 100, 17, 72, 93, 25, 35, 45, 91, 78, 13, 97, 56, 40, 69, 86, 69, 99, 4, 36, 36, 82, 35, 52, 12, 46, 74, 57, 65, 91, 51, 41, 42, 17, 78, 49, 75, 9, 23, 65, 44, 47, 93, 84, 70, 19, 22, 57, 27, 84, 57, 85, 2, 61, 17, 90, 34, 49, 74, 64, 46, 61, 0, 28, 57, 78, 75, 31, 27, 24, 10, 93, 34, 19, 75, 53, 17, 26, 2, 41, 89, 79, 37, 14, 93, 55, 74, 11, 77, 60, 61, 2, 68, 0, 15, 12, 47, 12, 48, 57, 73, 17, 18, 11, 83, 38, 5, 36, 53, 94, 40, 48, 81, 53, 32, 53, 12, 21, 90, 100, 32, 29, 94, 92, 83, 80, 36, 73, 59, 61, 43, 100, 36, 71, 89, 9, 24, 56, 7, 48, 34, 58, 0, 43, 34, 18, 1, 29, 97, 70, 92, 88, 0, 48, 51, 53, 0, 50, 21, 91, 23, 34, 49, 19, 17, 9, 23, 43, 87, 72, 39, 17, 17, 97, 14, 29, 4, 10, 84, 10, 33, 100, 86, 43, 20, 22, 58, 90, 70, 48, 23, 75, 4, 66, 97, 95, 1, 80, 24, 43, 97, 15, 38, 53, 55, 86, 63, 40, 7, 26, 60, 95, 12, 98, 15, 95, 71, 86, 46, 33, 68, 32, 86, 89, 18, 88, 97, 32, 42, 5, 57, 13, 1, 23, 34, 37, 13, 65, 13, 47, 55, 85, 37, 57, 14, 89, 94, 57, 13, 6, 98, 47, 52, 51, 19, 99, 42, 1, 19, 74, 60, 8, 48, 28, 65, 6, 12, 57, 49, 27, 95, 1, 2, 10, 25, 49, 68, 57, 32, 99, 24, 19, 25, 32, 89, 88, 73, 96, 57, 14, 65, 34, 8, 82, 9, 94, 91, 19, 53, 61, 70, 54, 4, 66, 26, 8, 63, 62, 9, 20, 42, 17, 52, 97, 51, 53, 19, 48, 76, 40, 80, 6, 1, 89, 52, 70, 38, 95, 62, 24, 88, 64, 42, 61, 6, 50, 91, 87, 69, 13, 58, 43, 98, 19, 94, 65, 56, 72, 20, 72, 92, 85, 58, 46, 67, 2, 23, 88, 58, 25, 88, 18, 92, 46, 15, 18, 37, 9, 90, 2, 38, 0, 16, 86, 44, 69, 71, 70, 30, 38, 17, 69, 69, 80, 73, 79, 56, 17, 95, 12, 37, 43, 5, 5, 6, 42, 16, 44, 22, 62, 37, 86, 8, 51, 73, 46, 44, 15, 98, 54, 22, 47, 28, 11, 75, 52, 49, 38, 84, 55, 3, 69, 100, 54, 66, 6, 23, 98, 22, 99, 21, 74, 75, 33, 67, 8, 80, 90, 23, 46, 93, 69, 85, 46, 87, 76, 93, 38, 77, 37, 72, 35, 3, 82, 11, 67, 46, 53, 29, 60, 33, 12, 62, 23, 27, 72, 35, 63, 68, 14, 35, 27, 98, 94, 65, 3, 13, 48, 83, 27, 84, 86, 49, 31, 63, 40, 12, 34, 79, 61, 47, 29, 33, 52, 100, 85, 38, 24, 1, 16, 62, 89, 36, 74, 9, 49, 62, 89), 8740)
    )

    for (cond <- conditions) {
      assert(maxProfitKTransactionsRecursive(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._2.mkString(",")}")
      assert(maxProfitKTransactionsIterative(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._2.mkString(",")}")
    }

    val source = scala.io.Source.fromResource("maximumSubCircularSubarray.txt")
    val testcase: Array[Int] = source.getLines().map(_.split(",").map(_.trim.toInt)).next().take(999)

    assert(maxProfitKTransactionsRecursive(2, testcase) == 119240)
    assert(maxProfitKTransactionsIterative(2, testcase) == 119240)
  }

  test("Coin Change") {
    val conditions: Array[(Array[Int], Int, Int)] = Array(
      (Array(1, 2, 5), 11, 3),
      (Array(2), 3, -1),
      (Array(1), 0, 0),
      (Array(3, 7, 405, 436), 8839, 25),
      (Array(389, 46, 222, 352, 4, 250), 5343, 16)
    )

    for (cond <- conditions) {
      assert(coinChange(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Coin Change 2") {
    val conditions: Array[(Array[Int], Int, Int)] = Array(
      (Array(1, 2, 5), 5, 4),
      (Array(3), 2, 0),
      (Array(10), 10, 1),
      (Array(1, 2, 5, 10, 15, 25), 100, 7572),
      (Array(10, 5), 20, 3),
    )

    for (cond <- conditions) {
      assert(change(cond._2, cond._1) == cond._3, f"wrong for array: ${cond._1.mkString(",")}")
      assert(changeFP(cond._2, cond._1) == cond._3, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Word Break") {
    val conditions: Array[(String, List[String], Boolean)] = Array(
      ("leetcode", List("leet", "code"), true),
      ("applepenapple", List("apple", "pen"), true),
      ("catsandog", List("cats", "dog", "sand", "and", "cat"), false),
      ("catsanddog", List("cats", "dog", "sand", "and", "cat"), true)
    )

    for (cond <- conditions) {
      assert(wordBreakRecursive(cond._1, cond._2) == cond._3, f"wrong for array: ${cond._1.mkString("")}")
    }
  }

  test("Longest Increasing Subsequence") {
    val conditions: Array[(Array[Int], Int)] = Array(
      (Array(10, 9, 2, 5, 3, 7, 101, 18), 4),
      (Array(0, 1, 0, 3, 2, 3), 4),
      (Array(7, 7, 7, 7, 7, 7, 7), 1),
      (Array(0, 1, 0, 3, 2, 3, 4), 5),
    )

    for (cond <- conditions) {
      assert(lengthOfLISBruteForce(cond._1) == cond._2, f"wrong for array: ${cond._1.mkString(",")}")
    }
  }

  test("Paint Fence") {
    val conditions: Array[(Int, Int, Int)] = Array(
      (3, 2, 6),
      (7, 2, 42),
      (4, 3, 66),
      (43, 2, 1402817466)
    )

    for (cond <- conditions) {
      assert(numWaysRecursive(cond._1, cond._2) == cond._3, f"wrong for pair: ${cond._1}, ${cond._2}")
    }
  }

  test("Count Unique Characters of All Substrings of a Given String") {
    val conditions: Array[(String, Int)] = Array(
      ("ABC", 10),
      ("ABA", 8),
      ("LEE", 6),
      ("LEETCODE", 92),
      ("DELQGVWNZKIJJPSXOVWWIZUXCEGWSQLESNSRBMKZARFPAXSVWQEZDENDAHNNIBHGHTFDLPGDLFXMIYRFNLMXHNPIFUAXINXPXLCTTJNLGGMKJIOEWBECNOFQPVCIKIAZMNGHEHFMCPWSMJTMGVSXTOGCGUYKFMNCGLCBRAFJLJVPIVDOLJBURULPGXBVDCEWXXXLTRMSHPKSPFDGNVOCZWDXJUWVNAREDOKTZMIUDKDQWWWSAEUUDBHMWZELOSBIHMAYJEMGZPMDOOGSCKLVHTGMETHUISCLJKDOQEWGVBULEMUXGTRKGXYFDIZTZWMLOFTCANBGUARNWQEQWGMIKMORVQUZANJNRNPMJWYLVHWKDFLDDBBMILAKGFROEQAMEVONUVHOHGPKLBPNYZFPLXNBCIFENCGIMIDCXIIQJWPVVCOCJTSKSHVMQJNLHSQTEZQTTMOXUSKBMUJEJDBJQNXECJGSZUDENJCPTTSREKHPRIISXMWBUGMTOVOTRKQCFSDOTEFPSVQINYLHXYVZTVAMWGPNKIDLOPGAMWSKDXEPLPPTKUHEKBQAWEBMORRZHBLOGIYLTPMUVBPGOOOIEBJEGTKQKOUURHSEJCMWMGHXYIAOGKJXFAMRLGTPNSLERNOHSDFSSFASUJTFHBDMGBQOKZRBRAZEQQVWFRNUNHBGKRFNBETEDJIWCTUBJDPFRRVNZENGRANELPHSDJLKVHWXAXUTMPWHUQPLTLYQAATEFXHZARFAUDLIUDEHEGGNIYICVARQNRJJKQSLXKZZTFPVJMOXADCIGKUXCVMLPFJGVXMMBEKQXFNXNUWOHCSZSEZWZHDCXPGLROYPMUOBDFLQMTTERGSSGVGOURDWDSEXONCKWHDUOVDHDESNINELLCTURJHGCJWVIPNSISHRWTFSFNRAHJAJNNXKKEMESDWGIYIQQRLUUADAXOUEYURQRVZBCSHXXFLYWFHDZKPHAGYOCTYGZNPALAUZSTOU", 629134)
    )

    for (cond <- conditions) {
      assert(uniqueLetterStringFP(cond._1) == cond._2, f"wrong for pair: ${cond._1}, ${cond._2}")
    }
  }

  test("Decode Ways") {
    val conditions: Array[(String, Int)] = Array(
      ("11106", 2),
      ("13106", 2),
      ("111", 3),
      ("131", 2),
      ("12", 2),
      ("226", 3),
      ("2026", 2),
      ("1103", 1),
      ("20026", 0),
      ("06", 0),
      ("001", 0),
      ("1123", 5),
      ("11232", 5),
      ("11222", 8),
      ("109106", 1),
      ("1092106", 1),
      ("1026106", 2),
      ("111111111111111111111111111111111111111111111", 1836311903),
      ("301", 0),
      ("27", 1)
    )

    for (cond <- conditions) {
      assert(numDecodings(cond._1) == cond._2, f"wrong for pair: ${cond._1}, ${cond._2}")
    }
  }

  test("Count Number of Texts") {
    val conditions: Array[(String, Int)] = Array(
      ("22233", 8),
      ("22", 2),
      ("222", 4),
      ("2222", 7),
      ("7777", 8),
      ("22222", 13),
      ("222222", 24),
      ("2222222", 44),
      ("222223", 13),
      ("2222233", 26),
      ("22222233", 48),
      ("22222222222222222", 19513),
      ("22222222222222222222222222222", 29249425),
      ("222222222222222222222222222222222", 334745777),
      ("2222222222222222222222222222222222", 615693474),
      ("22222222222222222222222222222222222", 132436845),
      ("222222222222222222222222222222222222", 82876089),
      ("222772227772222277222299992222222222", 51064832),
      ("444444444444444444444444444444448888888888888888999999999999333333333333333366666666666666662222222222222222666666666666666633333333333333338888888888888888222222222222222244444444444444448888888888888222222222222222288888888888889999999999999999333333333444444664", 537551452)
    )

    for (cond <- conditions) {
      assert(countTexts(cond._1) == cond._2, f"wrong for pair: ${cond._1}, ${cond._2}")
    }

    val source = scala.io.Source.fromResource("countNumberOfTexts.txt")
    val testcase: String = source.getLines().map(_.split(",")).next().head
    assert(countTexts(testcase) == 818804400)

  }

  test("Cheapest Flights Within K Stops") {
    val conditions: Array[(Int, Array[Array[Int]], Int, Int, Int, Int)] = Array(
      (4, Array(Array(0, 1, 100), Array(1, 2, 100), Array(2, 0, 100), Array(1, 3, 600), Array(2, 3, 200)), 0, 3, 1, 700),
      (3, Array(Array(0, 1, 100), Array(1, 2, 100), Array(0, 2, 500)), 0, 2, 1, 200),
      (3, Array(Array(0, 1, 100), Array(1, 2, 100), Array(0, 2, 500)), 0, 2, 0, 500),
      (5, Array(Array(4, 1, 1), Array(1, 2, 3), Array(0, 3, 2), Array(0, 4, 10), Array(3, 1, 1), Array(1, 4, 3)), 2, 1, 1, -1)
    )

    for (cond <- conditions) {
      assert(findCheapestPrice(cond._1, cond._2, cond._3, cond._4, cond._5) == cond._6)
    }
  }

  test("Palindromic Substrings") {
    val conditions: Array[(String, Int)] = Array(
      ("abc", 3),
      ("aaa", 6),
      ("xabax", 7),
      ("axbobax", 8)
    )

    for (cond <- conditions) {
      assert(countSubstrings(cond._1) == cond._2)
    }
  }

  test("Ones and Zeroes") {
    val conditions: Array[(Array[String], Int, Int, Int)] = Array(
      (Array("10", "0001", "111001", "1", "0"), 5, 3, 4),
      (Array("10", "0", "1"), 1, 1, 2),
      (Array("10", "0001", "111001", "1", "0", "010001", "0", "11", "0001"), 12, 5, 6),
      (Array("0", "11", "1000", "01", "0", "101", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0110101", "0", "11", "01", "00", "01111", "0011", "1", "1000", "0", "11101", "1", "0", "10", "0111"), 9, 80, 17),
      (Array("0", "11", "1000", "01", "0", "101", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0110101", "0", "11", "01", "00", "01111"), 9, 80, 15),
    )

    for (cond <- conditions) {
      assert(findMaxForm(cond._1, cond._2, cond._3) == cond._4)
    }
  }

  test("Remove Palindromic Subsequences") {
    val conditions: Array[(String, Int)] = Array(
      ("ababa", 1),
      ("ab", 2),
      ("abb", 2),
      ("baabb", 2),
      ("abbbabb", 2),
      ("abbbabbbababab", 2)
    )

    for (cond <- conditions) {
      assert(removePalindromeSub(cond._1) == cond._2)
    }
  }

  test("Minimum Cost For Tickets") {
    val conditions: Array[(Array[Int], Array[Int], Int)] = Array(
      (Array(1, 4, 6, 7, 8, 20), Array(2, 7, 15), 11),
      (Array(1, 4, 6, 7, 8, 20), Array(7, 2, 15), 6),
      (Array(1, 5, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 23, 24, 29), Array(3, 12, 54), 39),
      (Array(1, 5, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20), Array(3, 12, 54), 30)
    )

    for (cond <- conditions) {
      assert(mincostTickets(cond._1, cond._2) == cond._3)
    }
  }

  test("Put Marbles in Bags") {
    val conditions: Array[(Array[Int], Int, Long)] = Array(
      (Array(1, 3, 5, 1), 2, 4),
      (Array(1, 3, 5, 1), 3, 4),
      (Array(1, 3), 2, 0),
      (Array(252994, 233749, 994473, 406675, 325820, 188471, 512268, 995561, 918822, 843104, 925217, 688527, 634194), 5, 4624106),
      (Array(624816082, 635702092, 682581157, 510974354, 182299912, 832240497, 489414671, 586298502, 327807468, 359722779, 233610040, 650719951, 743772988, 32936227, 454361852, 571524611, 564335421, 994647488, 332881629, 455716487, 450346128, 4884719, 376143775, 894029932, 362003112, 90046703, 852403818, 623804366, 971923416, 72232020, 443943503, 280352442, 614135884, 778554453, 579050048, 49898572, 188817818, 432833174, 57774110, 790621284, 430960200, 999282094, 52752056, 392649433, 121327006, 875226362, 622439504, 54886197, 368333554, 65642412, 219882618, 403357588, 404794163, 829169374, 302128729, 427802648, 139222244, 820234070, 101027225, 254199872, 904715039, 26923498, 260240246, 31567158, 275774896, 180338731, 57732837, 330669428, 447533178, 509571161, 669098143, 430395863, 558896064, 211691764, 967723223, 758039117, 93514184, 759830300, 872467675, 204778552, 557357515, 282307965, 730658645, 421255632, 552089355, 566449588, 964820809, 295667610, 196089569, 381779258, 399377972, 754950175, 924128989, 453269477, 214220761, 136003199, 360637033, 298964444, 301621640, 644681904, 980612091, 666142315, 247094290, 895868880, 649300319, 645475098, 944301793, 556700583, 887819808, 130318129, 919518830, 32107986, 347869034, 777755634, 225609608, 12426457, 157874957, 900178407, 73873795, 288514091, 259826304, 900146639, 359913222, 39072042, 673484860, 338397808, 574941394, 799078802, 774389957, 274228222, 61799909, 393755943, 685644467, 436852470, 397108269, 553502259, 592323983, 843891189, 382586613, 420772778, 144176095, 817971076, 338207194, 7554626, 864636949, 370635435, 626215667, 867234869, 611531800, 221268508, 601532194, 975779332, 783098467, 478819917, 175261963, 640579930, 532754662, 747387154, 676236452, 579236082, 432880637, 817928407, 388858262, 295580153, 648467646, 353734117, 98965404, 903486780, 684654462, 552061893, 335159968, 35509472, 809351555, 228289422, 589619977, 663626300, 900313406, 714579494, 433792307, 246179468, 814081930, 982228182, 489603150, 171813351, 671774346, 561559861, 84920044, 582423139, 643671525, 385711350, 8077984, 89233569, 936392224, 749375025, 524751871, 614951272, 699596999, 383149966, 492258514, 391158816, 797533036, 854372923, 492904723, 963582452, 156253601, 71463034, 348725631, 272114481, 744029974, 483820294, 810193291, 197885325, 866906824, 37348978, 983448921, 374155263, 248206865, 213773322, 391363750, 876784065, 495851560, 221208092, 168105177, 531580086, 698222236, 536498438, 175789470, 436828155, 33071000, 274372813, 561431631, 614214441, 455805458, 866202566, 229816240, 453425259, 703241349, 995958254, 553752784, 971650802, 521798036, 363510988, 218855982, 98303767, 290265539, 636837565, 210281510, 142936244, 950188466, 575058856, 472891398, 408680757, 185945549, 788056921, 965170370, 666080798, 681415630, 545170281, 78986574, 569621480, 358983814, 706058357, 421721114, 929186616, 574182572, 773639492, 477294628, 549832359, 996729713, 53052374, 533174869, 385138881, 819984886, 545667398, 878482477, 993949000, 40667163, 572679081, 298770282, 51272012, 271381587, 910604949, 30437775, 738757848, 771226123, 76044280, 340038228, 979935609, 855495590, 556835031, 253813531, 999462865, 46955403, 715889327, 336380540, 37161786, 282674803, 796650403, 259410638, 56283578, 105953306, 566337390, 351988175, 524420338, 172850621, 948899321, 916091478, 919642949, 183551170, 577341871, 36687492, 241850094, 195763082, 896727579, 474979022, 136341212, 508187793, 33074542, 585794161, 580456971, 579043539, 488471372, 899493809, 706881962, 290394696, 307258955, 124607744, 608384939, 902864475, 507168950, 370675353, 936529501, 742142809, 756513745, 191722170, 169495415, 415287341, 619604386, 314000340, 220546383, 354919656, 888190565, 555690169, 376364037, 446688392, 2120320, 545924106, 952018432, 106984109, 708004335, 477601259, 295542179, 426927739, 943280556, 164479419, 460617269, 436977886, 984399372, 100727034, 481086767, 249373125, 736330718, 806738870, 988997490, 925736708, 926881518, 365269354, 73340466, 733803254, 784032739, 671453020, 185167548, 770381968, 457835793, 28513171, 870661163, 169584849, 865769664, 13243928, 636735302, 689087548, 260065815, 241548834, 343968943, 256283277, 513781781, 380611039, 754011443, 29899568, 518681120, 234032545, 973083865, 121945058, 748697282, 545216336, 573164351, 710509902, 427220447, 69158275, 57219124, 224500188, 807361888, 807663957, 824632251, 535144346, 990260069, 172099463, 409655409, 287032565, 281250482, 412104122, 59116491, 911154332, 688924863, 655659566, 961427705, 166457662, 986895468, 66740092, 642170490, 851207379, 65347049, 443929793, 372698047, 464909638, 862772859, 371589513, 677041870, 299373087, 514949219, 933879261, 565602079, 307243226, 247275890, 44509704, 581260379, 571361262, 267269110, 844904478, 623817417, 806132436, 898683200, 477806458, 93428681, 906663994, 857035472, 456361420, 867025844, 209805447, 850503104, 587351162, 982810166, 342617370, 705123731, 100494645, 594456647, 915336392, 360207097, 601979947, 417071276, 401954679, 288721324, 428055752, 39570366, 807556002, 369892251, 251409295, 206304158, 624068885, 309723510, 802306068, 781064783, 996956630, 329394336, 714359260, 101266126, 804750216, 282561821, 301939907, 436649003, 610924371, 524706929, 552332396, 31068855, 885814020, 921102493, 965050698, 357545691, 269724346, 415544264, 242175149, 794537596, 430008976, 95491050, 56800847, 506301092, 720589203, 879916856, 688155855, 889010800, 183893767, 698900882, 816976651, 547267855, 335026469, 80816074, 722973359, 657204739, 343542232, 471992915, 291276653, 248292513, 752526305, 359770809, 843756242, 714405916, 562958684, 813415828, 790921852, 156578834, 840315310, 364065908, 538952429, 928264047, 520626635, 215819562, 524139852, 142869541, 169653655, 968066786, 278921125, 158043301, 837878093, 376257527, 739620277, 476528192, 518216408, 862695355, 88065519, 23638488, 753922759, 721562137, 83115632, 665655588, 386492695, 631732711, 221442347, 147256729, 230308530, 872078130, 704215702, 736557518, 222304889, 669129468, 402350397, 74017463, 347032605, 174296739, 350413381, 604813588, 256534940, 759815591, 286525365, 117370455, 363694797, 15715007, 619358717, 627634193, 762695989, 630604365, 382977432, 182006415, 346902703, 551772689, 469634606, 788870657, 734090318, 566071770, 429525500, 893454135, 531119481, 295571593, 748067246, 726807269, 454870588, 789218233, 177845048, 782038970, 9606350, 105700318, 353247787, 989888953, 851179380, 828283033, 408304237, 114192898, 392881008, 129836654, 121411617, 309895634, 608638543, 102277747, 48493897, 277083137, 910636806, 25896313, 322902040, 909766024, 435071675, 781285123, 596512388, 860387445, 932380632, 706411896, 656484979, 347535926, 807098834, 357848958, 852641004, 404011315, 459932888, 272500623, 654004697, 442560172, 496624561, 704358649, 826669204, 812809804, 993203544, 755871381, 686065787, 423322724, 600200537, 69492859, 176539720, 396585005, 560637722, 441186169, 667605740, 772636816, 976102849, 417980252, 640932154, 674488220, 205878183, 818525348, 843471620, 792202232, 905992839, 395069549, 705175408, 40044580, 220193921, 256843437, 202109847, 870713359, 146064647, 781408194, 132586177, 205418626, 606397653, 347806494, 723577654, 222581956, 437030450, 396398557, 436094450, 240016823, 423859264, 542976347, 844363825, 550889758, 23060518, 170521937, 148815630, 274341173, 233188649, 349532980, 797952522, 529620242, 332124914, 96893180, 884229886, 11199817, 157410908, 875702784, 421881262, 533362295, 16957913, 316889787, 529058982, 838565054, 281904090, 630843486, 466820783, 414327437, 146855619, 741514480, 665649006, 114573290, 25573779, 339957747, 843328082, 707148432, 112938153, 863283371, 418347702, 283812197, 147116133, 751498402, 631429913, 345896456, 729382094, 391030754, 518343720, 493370745, 735759771, 306821352, 826584332, 720049873, 537762298, 525386427, 532318127, 650256497, 82019550, 168760406, 254199548, 25223093, 563838258, 983711347, 257462275, 567902996, 768250082, 890281904, 739883347, 534198807, 667544007, 658860163, 303084327, 333451499, 246542553, 183998717, 640330159, 724134133, 53992928, 433613598, 774829096, 169385192, 732076722, 69064210, 61409107, 526293465, 916760504, 326741132, 498161909, 118707594, 917860685, 814327559, 588102907, 847699514, 944545576, 644959124, 477460462, 787015785, 367186299, 702971957, 663518097, 18766811, 550073062, 851888919, 557978824, 463679599, 291535854, 721364092, 637453018, 286864307, 227505892, 594600565, 561065143, 597440890, 831041904, 945641733, 580177099, 697458230, 113418350, 604630909, 796562603, 480820174, 788479184, 914073210, 997110333, 952257691, 511898484, 260132022, 773192322, 32629904, 862173008, 35194404, 122071661, 632154882, 537219768, 463772331, 77981090, 43408551, 607050287, 574906805, 337184688, 679292371, 77470125, 106123067, 42447187, 658098941, 495935405, 738143685, 531829342, 439160543, 963397206, 428532827, 946784910, 268326469, 912128281, 922612287, 910531152, 678286113, 446124464, 639242641, 88715403, 148256678, 634706529, 37734517, 677754494, 460903529, 508456070, 435850154, 472835332, 869322099, 146753124, 604165750, 920453738, 671771372, 272319255, 817755391, 522938349, 768747201, 41902684, 667412256, 367993801, 575631395, 142826412, 932123679, 392574910, 265560707, 847478475, 253363348, 534882569, 900465996, 743314902, 774016777, 47300141, 194235543, 348604174, 55241624, 607835978, 811910976, 864055901, 127480879, 472038159, 566632343, 482650999, 621667469, 989996576, 663707280, 975079168, 844084870, 437737304, 622307582, 178458545, 848201716, 171060015, 577730261, 7086079, 336477626, 686703160, 287207876, 654273443, 813217546, 647885445, 200250827, 62656303, 886230459, 451560545, 865259186, 628858690, 140651748, 413173632, 108673534, 211431931, 832481656, 185910128, 394667900, 827360172, 617806689, 197892331, 428763904, 339173387, 591557312, 356235240, 471525829, 498197057, 742228668, 854195368, 32347048, 736153074, 861288522, 257368752, 694896871, 815514696, 298294281, 488363767, 645069986, 85650822, 768879902, 599234942, 285748571, 309389454, 663407710, 21428630, 612776171, 131862913, 944823444, 354791130, 500228917, 10688332, 308409728, 304795423, 885936601, 378351428, 72003193, 854477273, 589891492, 180236400, 283132762, 259316708, 384827658, 248769481, 262802649, 464145724, 892613821, 883856949, 69108138, 745118728, 834936758, 250634210, 960920674, 247671723, 672766264, 4557969, 244594820, 619452250, 168405334, 336344401, 828105547, 729519541, 526993591, 286825495, 694208859, 730050717, 612740919, 879349424, 691497561, 645013394, 607855207, 257929922, 489750175, 78918164, 903005090, 573555075, 314563915, 900501799, 269841834, 977196528, 904628488, 995027981, 887175402, 661178935, 513631237, 126893492, 89852653, 692201960, 913036905, 696202214, 325012151, 998600600, 629176670, 522646085, 653764251, 229670225, 264871040, 895722848, 641697271), 500, 320202884644L),
      (Array(252994, 233749, 994473, 406675, 325820, 188471, 512268, 995561, 918822, 843104, 925217, 688527, 634194, 596719, 889929, 806154, 369010, 559780, 503053, 778146, 288330, 36254, 884048, 805769, 792530, 559611, 893244, 98455, 349625, 793970, 977421, 341470, 764976, 251857, 335694, 973615, 536979, 71635, 56763, 668156, 164915, 413510, 53489, 252719, 362730, 462781, 226850, 459675, 204828, 86401, 672019, 896355, 907904, 621367, 748988, 853093, 190956, 454763, 109220, 538026, 863572, 950166, 805643, 383060, 488292, 141213, 640539, 746730, 544986, 231282, 448496, 308755, 798568, 488162, 935259, 481948, 692539, 900075, 144263, 836447, 538802, 780530, 161262, 634990, 946194, 390493, 281715, 496729, 558764, 338888, 747785, 893367, 193190, 390948, 747684, 838500, 896820, 147602, 932771, 993942, 650405, 38008, 172147, 367090, 783485, 392560, 493185, 466940, 552711, 213597, 846777, 804188, 84054, 675025, 762399, 241317, 411619, 399256, 265281, 798340, 223603, 655575, 804630, 321311, 994512, 69016, 182593, 175499, 862394, 739658, 489039, 57917, 579102, 272891, 584503, 363428, 984324, 980005, 838835, 53370, 392117, 918783, 277423, 360175, 652945, 281518, 770232, 944993, 393102, 162175, 880299, 248932, 647137, 533283, 990664, 281187, 763226, 281765, 263122, 697793, 535768, 793480, 312337, 422718, 989686, 917498, 415295, 663998, 2608, 846268, 665476, 220926, 355533, 268612, 823429, 438118, 661344, 215452, 225241, 842584, 242964, 428015, 906542, 484578, 146648, 232251, 140355, 230229, 357825, 386280, 144057, 113909, 689049, 112288, 828640, 154382, 69127, 982169, 995401, 145708, 833626, 19230, 413141, 360500, 889895, 48332, 55800, 155681, 62788, 862081, 31782, 131026, 580588, 71431, 820819, 657628, 688469, 775647, 866247, 691622, 773691, 436993, 569365, 295277, 753806, 79562, 581969, 134228, 708548, 25410, 494489, 525107, 109441, 637212, 347730, 993543, 472593, 896055, 340983, 266639, 301145, 488110, 491787, 356168, 141689, 827611, 426977, 38271, 991615, 799938, 364799, 128289, 172062, 575643, 376772, 163917, 72552, 449134, 147581, 195592, 67566, 348209, 465353, 955711, 609621, 83065, 556539, 623300, 715842, 598841, 989426, 262765, 379769, 487358, 328059, 350884, 974879, 343198, 287039, 864544, 715314, 183429, 36547, 787227, 52307, 605774, 607049, 883082, 122273, 477548, 39315, 352092, 153361, 589939, 378890, 508092, 913249, 553234, 668650, 913875, 23154, 271148, 222561, 939557, 69889, 39274, 856973, 548619, 446904, 308801, 126604, 542877, 53104, 434341, 732672, 772162, 324193, 133419, 494030, 548581, 752405, 888377, 347351, 987674, 458942, 604409, 630073, 213593, 454028, 502331, 857186, 850711, 35065, 34162, 828592, 909774, 237212, 608603, 728502, 980389, 818217, 235238, 987657, 423902, 117056, 269853, 618165, 534086, 949294, 932284, 719757, 668762, 771400, 393362, 439192, 662826, 291173, 567853, 255243, 921614, 426831, 907103, 23229, 377736, 776340, 114202, 685507, 78767, 691566, 442480, 625584, 699592, 112241, 375472, 389992, 804112, 101966, 870782, 667263, 630401, 404347, 662300, 233670, 455594, 729354, 821086, 26841, 518949, 266858, 129039, 966431, 917943, 629095, 947193, 248525, 542028, 786735, 291952, 626460, 560146, 453571, 862272, 511992, 489000, 480507, 837918, 315857, 60892, 91574, 753315, 649002, 585024, 859298, 185566, 631404, 509329, 516953, 605728, 287097, 882834, 234330, 62388, 50496, 914626, 831435, 752901, 585034, 478121, 412564, 594853, 272978, 534173, 319331, 59358, 653842, 65573, 251129, 512355, 348348, 495739, 141332, 464399, 864680, 345211, 127706, 474007, 832771, 33994, 876472, 234080, 538620, 328993, 253961, 672331, 504866, 910746, 12480, 877835, 854511, 11551, 448305, 488759, 628401, 723647, 876327, 879671, 836726, 141816, 827291, 294289, 842423, 283149, 919281, 899712, 255471, 351086, 24393, 453576, 463015, 623628, 137541, 128093, 425741, 64593, 785568, 609195, 860087, 705992, 674124, 721187, 835628, 353318, 285882, 216805, 658328, 253449, 904042, 234017, 533224, 869816, 134876, 836427, 768447, 717804, 807367, 710613, 529014, 722129, 542854, 232127, 218300, 299672, 423378, 978270, 809945, 420620, 456416, 158479, 975507, 532528, 928967, 926681, 474629, 408127, 770520, 107990, 365208, 703012, 958592, 589074, 506624, 720071, 945850, 364771, 484410, 411028, 986342, 282416, 677225, 5269, 312321, 989935, 338107, 689038, 676572, 782656, 966683, 814214, 357899, 296133, 250016, 473880, 492464, 837400, 184282, 656396, 353394, 40909, 428761, 940416, 322386, 762897, 925033, 702718, 218517, 213429, 818944, 690853, 162797, 656988, 404351, 265718, 714878, 954762, 436375, 371325, 364210, 218158, 503954, 954959, 136754, 412730, 770342, 916936, 501399, 270725, 866412, 80493, 504967, 527152, 835898, 268383, 662977, 129071, 193697, 762265, 953322, 841814, 172809, 474238, 849934, 527447, 983301, 873345, 378846, 293393, 329638, 359225, 583309, 653184, 87109, 727754, 862190, 822985, 157958, 761152, 422546, 158816, 498292, 764815, 456587, 828945, 163122, 195154, 654003, 181772, 547438, 405043, 834144, 161684, 908826, 85049, 829571, 824202, 156895, 88033, 48223, 46383, 979159, 46633, 256791, 881645, 676999, 506252, 41209, 271613, 58259, 691169, 47195, 212422, 799847, 536739, 478904, 871911, 50133, 850451, 921553, 132809, 270281, 373446, 29208, 755930, 266238, 823594, 996906, 911879, 392910, 43712, 9734, 176365, 142043, 789823, 821543, 874905, 904312, 828335, 652295, 744199, 756078, 378693, 270665, 534316, 517321, 137016, 324717, 438459, 142296, 301566, 321379, 65715, 314995, 614400, 674126, 161204, 669868, 415965, 257385, 378738, 963795, 37554, 145722, 857515, 122311, 256849, 491289, 20559, 182024, 91901, 261521, 346395, 390790, 524450, 689905, 625065, 673539, 55526, 769591, 550614, 15300, 163474, 118294, 278251, 845314, 134220, 635370, 988224, 764245, 195407, 377509, 511792, 701018, 998927, 65552, 588434, 417152, 86364, 494436, 615611, 302155, 42362, 374502, 311468, 963138, 152516, 263105, 674903, 710822, 715874, 409107, 384043, 769319, 303287, 807148, 515905, 476282, 497483, 356637, 813329, 586581, 255102, 518088, 788232, 123132, 123269, 184124, 665021, 432986, 198543, 639384, 394353, 372572, 795408, 184957, 71171, 31960, 197393, 297436, 469660, 980813, 576402, 310520, 401430, 517478, 96320, 363947, 145796, 540041, 279023, 602760, 803792, 39940, 967525, 974181, 881611, 528341, 605749, 982220, 909387, 578240, 827305, 18184, 717558, 29071, 757138, 156205, 589253, 637992, 862413, 413651, 59433, 903189, 736222, 736312, 977994, 163317, 957362, 779051, 890932, 531415, 193441, 231507, 768911, 394791, 731713, 839263, 637284, 502267, 800583, 168179, 459958, 118338, 493836, 524136, 448763, 727621, 614437, 569779, 116109, 954137, 797975, 742656, 776417, 53702, 932501, 995879, 247732, 296028, 864316, 387535, 456068, 81992, 132611, 777394, 293288, 286188, 513244, 925631, 297273, 539190, 554723, 940067, 611395, 893739, 302616, 834471, 514414, 869374, 809348, 729422, 993636, 16628, 984931, 528590, 597892, 264581, 132108, 990559, 308536, 702665, 187506, 425604, 124006, 912962, 796861, 107958, 583719, 685380, 709086, 839895, 227417, 696017, 182006, 37730, 210489, 771575, 591808, 947456, 843399, 296017, 940339, 287783, 988049, 889972, 351514, 816130, 972972, 912840, 379714, 958729, 45166, 164153, 489882, 786967, 646867, 426417, 943143, 973049, 784544, 448536, 223978, 854619, 463728, 640840, 282834, 259355, 179836, 16682, 757434, 870752, 652323, 204788, 609721, 890385, 496651, 343015, 287308, 397303, 356550, 39180, 704493, 132897, 554178, 443347, 878628, 535249, 866761, 813861, 774030, 674031, 388491, 409547, 622386, 898627, 647542, 161714, 507422, 176269, 325845, 599120, 708426, 268020, 849795, 949363, 495545, 703804, 85883, 175917, 49293, 912690, 322177, 519856, 17675, 48451, 675750, 464646, 881268, 959997, 149930, 536456, 486166, 58306, 490978, 116184, 322033, 357548, 681230, 412299, 785593, 737850, 728942, 960730, 192783, 237305, 784727, 611543, 620640, 899188, 989871, 883194, 327378), 500, 335624026)
    )

    for (cond <- conditions) {
      assert(putMarbles(cond._1, cond._2) == cond._3)
    }
  }


}